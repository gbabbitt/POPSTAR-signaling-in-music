# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'popstar.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#############################################################################
######   POPSTAR software for detecting fitness signaling in music
######   produced by Dr. Gregory A. Babbitt
######   and students at the Rochester Instituteof Technology in 2025.
######   Offered freely without guarantee.  License under GPL v3.0
#############################################################################


from PyQt5 import QtCore, QtGui, QtWidgets
import time



class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(479, 676)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(30, 530, 171, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.makeFace)
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(390, 620, 80, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.closeIt)
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(210, 490, 157, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.analyzeSignal)
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 490, 171, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.processSound)
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(30, 620, 351, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(80, 10, 351, 31))
        self.label.setObjectName("label")
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(210, 530, 171, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.makeMovie)
        self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        self.pushButton_6.setGeometry(QtCore.QRect(210, 570, 171, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.playFace)
        self.pushButton_7 = QtWidgets.QPushButton(Dialog)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 570, 171, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.playTraj)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(30, 60, 421, 121))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("waveform.gif"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.movie = QtGui.QMovie("waveform.gif")
        self.label_2.setMovie(self.movie)
        self.movie.start()
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(30, 190, 421, 221))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(290, 450, 81, 23))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(290, 420, 161, 23))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit.setText("10")
        self.lineEdit_2.setText("test.mp3")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(30, 420, 261, 31))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(30, 450, 271, 31))
        self.label_4.setObjectName("label_4")
        # normalize box
        self.checkBox = QtWidgets.QCheckBox(Dialog)
        self.checkBox.setGeometry(QtCore.QRect(375, 490, 80, 31))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.setChecked(True)
        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(395, 490, 80, 31))
        self.label_7.setText("beats?")       
        # lyrics box
        self.checkBox_2 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_2.setGeometry(QtCore.QRect(375, 470, 80, 31))
        self.checkBox_2.setObjectName("checkBox")
        self.checkBox_2.setChecked(False)
        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(395, 470, 80, 31))
        self.label_8.setText("lyrics?")
        # mean or max box
        self.checkBox_3 = QtWidgets.QCheckBox(Dialog)
        self.checkBox_3.setGeometry(QtCore.QRect(375, 450, 80, 31))
        self.checkBox_3.setObjectName("checkBox")
        self.checkBox_3.setChecked(False)
        self.label_9 = QtWidgets.QLabel(Dialog)
        self.label_9.setGeometry(QtCore.QRect(395, 450, 80, 31))
        self.label_9.setText("max value")
        ### picture window
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(30, 190, 421, 221))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("starDavid.JPG"))
        self.label_5.setScaledContents(True)
        
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "BabbittLab@RIT"))
        self.pushButton.setText(_translate("Dialog", "3. calculate faces"))
        self.pushButton_2.setText(_translate("Dialog", "exit"))
        self.pushButton_3.setText(_translate("Dialog", "2. analyze signal"))
        self.pushButton_4.setText(_translate("Dialog", "1. process sounds"))
        self.pushButton_6.setText(_translate("Dialog", "6. play faces"))
        self.pushButton_7.setText(_translate("Dialog", "5. play trajectory"))
        self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600; color:#555500;\">POPSTAR - BabbittLab@RIT</span></p></body></html>"))
        self.pushButton_5.setText(_translate("Dialog", "4. make movies"))
        self.label_3.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">name of file (or folder) </span></p></body></html>"))
        self.label_4.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">length of window (seconds)</span></p></body></html>"))
######################################### subroutines ######################################################
    def closeIt(self):
        print("POPSTAR program closed")
        sys.exit(app.exec_())
         
    def makeFace(self):
        print("making Chernoff faces")
        cmd = "python3 makeFace.py"
        os.system(cmd)
        for i in range(76): 
            time.sleep(0.01) 
            # setting value to progress bar 
            self.progressBar.setValue(i)
            
    def analyzeSignal(self):
        print("analyzing fitness signal")
        for i in range(51): 
            time.sleep(0.01) 
            # setting value to progress bar 
            self.progressBar.setValue(i)
        
    def processSound(self):
        print("making control file")
        filename = self.lineEdit_2.text()
        if os.path.isfile(filename):
            print("user input is a file")
            fileORfolder = "file"
            filename = filename[:-4]
        if os.path.isdir(filename):
            print("user input is a folder")
            fileORfolder = "folder"
        if self.checkBox.isChecked() == True:
            metroOption = "yes" 
        elif self.checkBox.isChecked() == False:
            metroOption = "no"
        if self.checkBox_2.isChecked() == True:
            lyricOption = "yes" 
        elif self.checkBox_2.isChecked() == False:
            lyricOption = "no"
        if self.checkBox_3.isChecked() == True:
            maxOption = "yes" 
        elif self.checkBox_3.isChecked() == False:
            maxOption = "no"   
        interval = self.lineEdit.text()
        f = open("./popstar.ctl", "w") 
        f.write("name,%s,#file or folder name to analyze\n" % filename)
        f.write("int,%s,#size of sliding window (seconds)\n" % interval)
        f.write("input,%s,#input type\n" % fileORfolder)
        f.write("metro,%s,#use metronome\n" % metroOption)
        f.write("lyrics,%s,#lyrics present in feature data\n" % lyricOption)
        f.write("max,%s,#use maximum values in feature data rather than averages\n" % maxOption)
        f.close()
        print("pre-processing sound file(s)")
        # setting for loop to set value of progress bar 
        cmd = "python3 processSound.py"
        os.system(cmd)
        for i in range(26): 
            time.sleep(0.01) 
            # setting value to progress bar 
            self.progressBar.setValue(i)
            
    def makeMovie(self):
        print("rendering movie file")
        cmd = "python3 makeMovie.py"
        os.system(cmd)
        for i in range(101): 
            time.sleep(0.01) 
            # setting value to progress bar 
            self.progressBar.setValue(i)
    
    def playFace(self):
        print("playing movie file")
        cmd = "python3 playFaceMovie.py"
        os.system(cmd)
        
    def playTraj(self):
        print("playing movie file")
        cmd = "python3 playTplotMovie.py"
        os.system(cmd)   
    
###########################################################################################################
###########################################################################################################

if __name__ == "__main__":
    import os
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())

############################################################################################################



